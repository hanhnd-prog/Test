import streamlit as st
import numpy as np
import pandas as pd
import json
from datetime import datetime,timedelta

import csv

import scipy.stats as stats
from sklearn.preprocessing import MinMaxScaler # Data normalization
from scipy.special import inv_boxcox

import matplotlib.pyplot as plt
import plotly.graph_objects as go

from model_utils import *

st.set_page_config(layout="wide")
st.title("üìà D·ª± b√°o d√≤ng ch·∫£y th∆∞·ª£ng l∆∞u s√¥ng ƒê√†")
st.subheader("Ph·∫ßn m·ªÅm n√†y l√† s·∫£n ph·∫©m c·ªßa ƒë·ªÅ t√†i ƒêTƒêL.CN.06.23")

st.sidebar.header("‚öôÔ∏è T√πy ch·ªçn ƒëi·ªÉm c·∫ßn d·ª± b√°o") 
prediction_site = st.sidebar.selectbox("D·ª± b√°o d√≤ng ch·∫£y:", [" ","ƒê·∫øn h·ªì Lai Ch√¢u", "ƒê·∫øn h·ªì B·∫£n Ch√°t", "Tr·∫°m th·ªßy vƒÉn N·∫≠m Gi√†ng"])

st.sidebar.header("‚öôÔ∏è Thi·∫øt ƒë·∫∑t lo·∫°i d·ª± b√°o")
prediction_type = st.sidebar.selectbox("Lo·∫°i d·ª± b√°o:", [" ","D√≤ng ch·∫£y trung b√¨nh ng√†y", "D√≤ng ch·∫£y trung b√¨nh 10 ng√†y", "D√≤ng ch·∫£y trung b√¨nh th√°ng"])

if prediction_site == "ƒê·∫øn h·ªì Lai Ch√¢u":
    uploaded_file = "data/Inputs/LaiChau.csv"
    if prediction_type == "D√≤ng ch·∫£y trung b√¨nh ng√†y":  
        df = pd.read_csv(uploaded_file, parse_dates=['date'])
        #df = df.rename(columns={df.columns[0]: 'date', df.columns[1]: 'value'})
        df = df.set_index('date')

        df = df.rename(columns={'value':'Flow'})
        last_row_df = [df.index[-1].date()] + df.iloc[-1].tolist()

        # Ve du lieu goc
        st.subheader("üîç D·ªØ li·ªáu G·ªëc")
        #st.line_chart(df['Flow'])
        fig = go.Figure()
        fig.add_trace(go.Scatter(
            x=df.index[:],
            y=df['Flow'][:],
            mode='lines', #name='D√≤ng ch·∫£y quan tr·∫Øc',
            line=dict(color = 'skyblue')
        ))
        st.plotly_chart(fig)

        data = np.array(df['Flow']) # data la du lieu goc
    elif prediction_type == "D√≤ng ch·∫£y trung b√¨nh 10 ng√†y":
        pass
    elif prediction_type == "D√≤ng ch·∫£y trung b√¨nh th√°ng":
        pass
elif prediction_site == "ƒê·∫øn h·ªì B·∫£n Ch√°t":
    uploaded_file = "data/Inputs/BanChat.csv"
    if prediction_type == "D√≤ng ch·∫£y trung b√¨nh ng√†y":
        df = pd.read_csv(uploaded_file, parse_dates=['date'])
        #df = df.rename(columns={df.columns[0]: 'date', df.columns[1]: 'value'})
        df = df.set_index('date')

        df = df.rename(columns={'value':'Flow'})
        last_row_df = [df.index[-1].date()] + df.iloc[-1].tolist()

        # Ve du lieu goc
        st.subheader("üîç D·ªØ li·ªáu G·ªëc")
        #st.line_chart(df['Flow'])
        fig = go.Figure()
        fig.add_trace(go.Scatter(
            x=df.index[:],
            y=df['Flow'][:],
            mode='lines', #name='D√≤ng ch·∫£y quan tr·∫Øc',
            line=dict(color = 'skyblue')
        ))
        st.plotly_chart(fig)

        data = np.array(df['Flow']) # data la du lieu goc
    elif prediction_type == "D√≤ng ch·∫£y trung b√¨nh 10 ng√†y":
        pass
    elif prediction_type == "D√≤ng ch·∫£y trung b√¨nh th√°ng":
        pass
elif prediction_site == "Tr·∫°m th·ªßy vƒÉn N·∫≠m Gi√†ng":
    uploaded_file = "data/Inputs/NamGiang.csv"
    if prediction_type == "D√≤ng ch·∫£y trung b√¨nh ng√†y":
        df = pd.read_csv(uploaded_file, parse_dates=['date'])
        #df = df.rename(columns={df.columns[0]: 'date', df.columns[1]: 'value'})
        df = df.set_index('date')

        df = df.rename(columns={'value':'Flow'})
        last_row_df = [df.index[-1].date()] + df.iloc[-1].tolist()

        # Ve du lieu goc
        st.subheader("üîç D·ªØ li·ªáu G·ªëc")
        #st.line_chart(df['Flow'])
        fig = go.Figure()
        fig.add_trace(go.Scatter(
            x=df.index[:],
            y=df['Flow'][:],
            mode='lines', #name='D√≤ng ch·∫£y quan tr·∫Øc',
            line=dict(color = 'skyblue')
        ))
        st.plotly_chart(fig)

        data = np.array(df['Flow']) # data la du lieu goc
    elif prediction_type == "D√≤ng ch·∫£y trung b√¨nh 10 ng√†y":
        pass
    elif prediction_type == "D√≤ng ch·∫£y trung b√¨nh th√°ng":
        pass
st.sidebar.header("‚öôÔ∏è Thi·∫øt ƒë·∫∑t th√¥ng s·ªë d·ª± b√°o")    
# 3.5. Creat lag features
#n_lag = st.sidebar.slider("S·ªë ng√†y tr·ªÖ (lag)", 1, 10, 1)
lag_input = st.sidebar.text_input("Nh·∫≠p c√°c gi√° tr·ªã lag (c√°ch nhau b·∫±ng d·∫•u ph·∫©y):", "1,2,3,7")
lags_lst = [int(i.strip()) for i in lag_input.split(",") if i.strip().isdigit()]
#lags_lst = [1,2,3] # C√°c ƒë·ªô tr·ªÖ

# 3.7. T·∫°o nh√£n d·ª± b√°o multi-output (n_steps_ahead b∆∞·ªõc ti·∫øp theo)
#n_steps_ahead = 10 # S·ªë b∆∞·ªõc c·∫ßn d·ª± b√°o tr∆∞·ªõc
n_steps_ahead = st.sidebar.slider("S·ªë ng√†y d·ª± b√°o (ahead):", 1, 10, 1)


st.sidebar.header("‚öôÔ∏è T√πy ch·ªçn m√¥ h√¨nh")
model_type = st.sidebar.selectbox("Ch·ªçn m√¥ h√¨nh:", ["LGBM", "RF", "LSTM"])
    
st.sidebar.header("‚öôÔ∏è T√πy ch·ªçn si√™u tham s·ªë")
if model_type == "LGBM":        
    # Upload  file chua hyperparameters
    st.sidebar.subheader("üì§ T·∫£i file hyperparameters (JSON ho·∫∑c Excel)")
    hyperparameters_file = st.sidebar.file_uploader("Ch·ªçn file:", type=["json", "xlsx"])
    
    if hyperparameters_file is not None:
        try:
            if hyperparameters_file.name.endswith(".json"):
                params_from_file = json.load(hyperparameters_file)
            elif hyperparameters_file.name.endswith(".xlsx"):
                df_params = pd.read_excel(hyperparameters_file,header=None, skiprows=1, parse_dates=[0], names=['Parameter', 'Value'])
                params_from_file = {}
                for i in range(len(df_params)):
                    params_from_file[df_params['Parameter'][i]]=df_params['Value'][i]
            else:
                st.sidebar.error("ƒê·ªãnh d·∫°ng file kh√¥ng h·ª£p l·ªá!")
        except Exception as e:
            st.sidebar.error(f"L·ªói khi ƒë·ªçc file: {e}")
        #st.sidebar.subheader("üéØ C√°c hyperparameters ƒëang s·ª≠ d·ª•ng:")
        st.sidebar.write("Number of leaves:",int(params_from_file['num_leaves']))
        st.sidebar.write("Max depth:",int(params_from_file['max_depth']))
        st.sidebar.write("Learning rate:",params_from_file['learning_rate'])
        st.sidebar.write("Number of estimators:",int(params_from_file['n_estimators']))    
    else:
        pass        
    
elif model_type == "RF":
    pass
elif model_type == "LSTM":
    pass
            
if st.sidebar.button("üß† Hu·∫•n luy·ªán v√† d·ª± b√°o b·∫±ng m√¥ h√¨nh"):
    with st.spinner("ƒêang hu·∫•n luy·ªán..."):
        model, train,train_pred, test_pred = train_and_predict(df,model_type,lags_lst = lags_lst, n_steps_ahead = n_steps_ahead,params=params_from_file,random_state = 42)
        # Xu·∫•t k·∫øt qu·∫£ d·ª± b√°o ra file Forecast_for_LaiChau.csv
        lst = last_row_df + test_pred.flatten().tolist()
        output_path = "data/Outputs/DubaoLaiChau.csv"
        with open(output_path, mode='a', newline='') as file:
            writer = csv.writer(file)
            writer.writerow(lst)
        
        st.success(f"M√¥ h√¨nh {model_type} hu·∫•n luy·ªán xong!")
        #save_model(model)
        
        # Hien thi ket qua huan luyen
        st.subheader("üîç K·∫øt qu·∫£ hu·∫•n luy·ªán m√¥ h√¨nh")
        # Ve hinh ket qua du bao           
        fig = go.Figure()
        fig.add_trace(go.Scatter(
            x=train.index[:],
            y=train['Flow'][:],
            mode='lines',
            name='Quan tr·∫Øc',
            line=dict(color = 'skyblue')
        ))
        
        fig.add_trace(go.Scatter(
            x=train.index[:],
            y=train_pred[0][:],
            mode='lines',
            name='T√≠nh to√°n',
            line=dict(color = 'yellow')
        ))
        st.plotly_chart(fig)
        
        # Hien thi bang ket qua du bao
        st.subheader("üîç K·∫øt qu·∫£ d·ª± b√°o")
        ten_cot = [str(df.index[-1].date()+timedelta(days=i)) for i in range(1,n_steps_ahead+1)]       
        test_pred = pd.DataFrame(data = test_pred,columns=ten_cot)
        st.dataframe(test_pred)
        
        # Ve hinh ket qua du bao           
        fig = go.Figure()
        fig.add_trace(go.Scatter(
            x=df.index[-10:],
            y=df['Flow'][-10:],
            mode='lines',
            name='Quan tr·∫Øc g·∫ßn ƒë√¢y',
            line=dict(color = 'skyblue')
        ))
        
        test_pred_transposed = test_pred.iloc[0].to_frame(name='value')
        fig.add_trace(go.Scatter(
            x=test_pred_transposed.index,
            y=test_pred_transposed['value'],
            mode='lines',
            name='D·ª± b√°o b·∫±ng m√¥ h√¨nh '+model_type,
            line = dict(color='yellow')
        ))
        st.plotly_chart(fig)
